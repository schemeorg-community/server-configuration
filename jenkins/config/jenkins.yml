jenkins:
  systemMessage: "Scheme Jenkins Readme: https://github.com/schemeorg-community/server-configuration/tree/master/jenkins"
  numExecutors: 0
  nodes:
    - permanent:
        mode: NORMAL
        name: "VPS Docker"
        labelString: "debian-x86_64 linux linux-x86_64 agent1"
        numExecutors: 1
        remoteFS: "/home/jenkins/agent"
        launcher:
          ssh:
            host: "jenkins-agent"
            port: 22
            credentialsId: agent_ssh
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
    - permanent:
        mode: NORMAL
        name: "Debian"
        labelString: "debian-x86_64 linux linux-x86_64 agent2"
        numExecutors: 16
        remoteFS: "/home/jenkins/agent"
        launcher:
          ssh:
            host: "retropikzel.madhacker.biz"
            port: 5522
            JavaPath: /home/jenkins/.sdkman/candidates/java/21.0.4-tem/bin/java
            credentialsId: agent_ssh
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
    - permanent:
        mode: NORMAL
        name: "FreeBSD"
        labelString: "freebsd-x86_64"
        numExecutors: 4
        remoteFS: "/home/jenkins/agent"
        launcher:
          ssh:
            host: "retropikzel.madhacker.biz"
            port: 5523
            credentialsId: agent_ssh
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
    - permanent:
        mode: NORMAL
        name: "Android"
        labelString: "android-arm"
        numExecutors: 1
        remoteFS: "/data/data/com.termux/files/home"
        launcher:
          ssh:
            host: "retropikzel.madhacker.biz"
            port: 8022
            credentialsId: agent_ssh
            launchTimeoutSeconds: 60
            maxNumRetries: 3
            retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
  authorizationStrategy:
    projectMatrix:
      entries:
      - group:
          name: "authenticated"
          permissions:
          - "Job/Read"
          - "Overall/Read"
      - user:
          name: "retropikzel"
          permissions:
          - "Overall/Administer"
      - user:
          name: "lassik"
          permissions:
          - "Overall/Administer"
      - user:
          name: "anonymous"
          permissions:
          - "Job/Read"
          - "Overall/Read"
  securityRealm:
    github:
      clientID: "${readfile:/secrets/github_oauth_clientid}"
      clientSecret: "${readfile:/secrets/github_oauth_secret}"
      githubApiUri: "https://api.github.com"
      githubWebUri: "https://github.com"
      oauthScopes: "read:org,user:email,repo"

appearance:
  pipelineGraphView:
    showGraphOnBuildPage: true
    showGraphOnJobPage: true

credentials:
  system:
    domainCredentials:
       - credentials:
           - basicSSHUserPrivateKey:
               scope: GLOBAL
               id: agent_ssh
               username: "jenkins"
               description: "SSH key for jenkins agent"
               privateKeySource:
                 directEntry:
                   privateKey: "${readFile:/secrets/id_rsa}"

jobs:
  - script: >
      folder('arvyy') {
        displayName: 'arvyy'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('arvyy')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      folder('arvyy/index_scheme_org') {
        displayName: 'index.scheme.org'
      }
  - script: >
      multibranchPipelineJob('arvyy/index_scheme_org/build') {
        displayName: 'Build and deploy'
        branchSources {
          git {
              id('github')
              remote('https://github.com/schemeorg-community/index.scheme.org')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(10)
          }
        }
      }
  - script: >
      folder('lassik') {
        displayName: 'lassik'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('lassik')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      folder('r7rs_srfi') {
        displayName: 'r7rs-srfi'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('retropikzel')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
              user {
                name('lassik')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      multibranchPipelineJob('r7rs_srfi/r7rs-srfi') {
        displayName: 'r7rs-srfi'
        branchSources {
          git {
              id('github')
              remote('https://github.com/srfi-explorations/r7rs-srfi.git')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      folder('retropikzel') {
        displayName: 'retropikzel'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('retropikzel')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      multibranchPipelineJob('retropikzel/compile-r7rs') {
        displayName: 'compile-r7rs'
        branchSources {
          git {
              id('git')
              remote('https://gitea.scheme.org/Retropikzel/compile-r7rs.git')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      multibranchPipelineJob('retropikzel/foreign-c') {
        displayName: 'foreign-c'
        branchSources {
          git {
              id('git')
              remote('https://git.sr.ht/~retropikzel/foreign-c')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      multibranchPipelineJob('retropikzel/foreign-c-sqlite') {
        displayName: 'foreign-c-sqlite'
        branchSources {
          git {
              id('git')
              remote('https://git.sr.ht/~retropikzel/foreign-c-sqlite')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      multibranchPipelineJob('retropikzel/foreign-c-srfi_170') {
        displayName: 'foreign-c-srfi-170'
        branchSources {
          git {
              id('git')
              remote('https://git.sr.ht/~retropikzel/foreign-c-srfi-170')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      multibranchPipelineJob('retropikzel/foreign-c-system') {
        displayName: 'foreign-c-system'
        branchSources {
          git {
              id('git')
              remote('https://git.sr.ht/~retropikzel/foreign-c-system')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      folder('jenkins') {
        displayName: 'jenkins'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('retropikzel')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
              user {
                name('lassik')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      multibranchPipelineJob('jenkins/auto-maintenance') {
        displayName: 'auto-maintenance'
        branchSources {
          git {
              id('git')
              remote('https://gitea.scheme.org/Jenkins/jenkins-automaintenance.git')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      folder('rinne') {
        displayName: 'rinne'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('retropikzel')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
              user {
                name('lassik')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      multibranchPipelineJob('rinne/snow-fort-guix-channel') {
        displayName: 'snow-fort-guix-channel'
        branchSources {
          git {
              id('git')
              remote('https://gitea.scheme.org/rinne/snow-fort-guix-channel.git')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      multibranchPipelineJob('rinne/snow-fort-windows-installer') {
        displayName: 'snow-fort-windows-installer'
        branchSources {
          git {
              id('git')
              remote('https://gitea.scheme.org/rinne/snow-fort-windows-installer.git')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
  - script: >
      folder('scheme_containers') {
        displayName: 'scheme-containers'
        properties {
          authorizationMatrix {
            entries {
              user {
                name('retropikzel')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
              user {
                name('lassik')
                permissions([ 'Credentials/Create', 'Credentials/Delete', 'Credentials/Update', 'Credentials/View', 'Job/Build', 'Job/Cancel' ])
              }
            }
          }
        }
      }
  - script: >
      multibranchPipelineJob('scheme_containers/monorepo') {
        displayName: 'monorepo'
        branchSources {
          git {
              id('git')
              remote('https://github.com/scheme-containers/monorepo.git')
          }
        }
        orphanedItemStrategy {
          discardOldItems {
              numToKeep(5)
          }
        }
      }
